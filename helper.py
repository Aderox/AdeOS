from PIL import Image
import os
from base64 import b16encode
from math import *

__VGA_PALETTE__ = [0x000000,0x0002aa,0x14aa00,0x00aaaa,0xaa0003,0xaa00aa,0xaa5500,0xaaaaaa,0x555555,0x5555ff,0x55ff55,0x55ffff,0xff5555,0xfd55ff,0xffff55,0xffffff,0x000000,0x101010,0x202020,0x353535,0x454545,0x555555,0x656565,0x757575,0x8a8a8a,0x9a9a9a,0xaaaaaa,0xbababa,0xcacaca,0xdfdfdf,0xefefef,0xffffff,0x0004ff,0x4104ff,0x8203ff,0xbe02ff,0xfd00ff,0xfe00be,0xff0082,0xff0041,0xff0008,0xff4105,0xff8200,0xffbe00,0xffff00,0xbeff00,0x82ff00,0x41ff01,0x24ff00,0x22ff42,0x1dff82,0x12ffbe,0x00ffff,0x00beff,0x0182ff,0x0041ff,0x8282ff,0x9e82ff,0xbe82ff,0xdf82ff,0xfd82ff,0xfe82df,0xff82be,0xff829e,0xff8282,0xff9e82,0xffbe82,0xffdf82,0xffff82,0xdfff82,0xbeff82,0x9eff82,0x82ff82,0x82ff9e,0x82ffbe,0x82ffdf,0x82ffff,0x82dfff,0x82beff,0x829eff,0xbabaff,0xcabaff,0xdfbaff,0xefbaff,0xfebaff,0xfebaef,0xffbadf,0xffbaca,0xffbaba,0xffcaba,0xffdfba,0xffefba,0xffffba,0xefffba,0xdfffba,0xcaffbb,0xbaffba,0xbaffca,0xbaffdf,0xbaffef,0xbaffff,0xbaefff,0xbadfff,0xbacaff,0x010171,0x1c0171,0x390171,0x550071,0x710071,0x710055,0x710039,0x71001c,0x710001,0x711c01,0x713900,0x715500,0x717100,0x557100,0x397100,0x1c7100,0x097100,0x09711c,0x067139,0x037155,0x007171,0x005571,0x003971,0x001c71,0x393971,0x453971,0x553971,0x613971,0x713971,0x713961,0x713955,0x713945,0x713939,0x714539,0x715539,0x716139,0x717139,0x617139,0x557139,0x45713a,0x397139,0x397145,0x397155,0x397161,0x397171,0x396171,0x395571,0x394572,0x515171,0x595171,0x615171,0x695171,0x715171,0x715169,0x715161,0x715159,0x715151,0x715951,0x716151,0x716951,0x717151,0x697151,0x617151,0x597151,0x517151,0x51715a,0x517161,0x517169,0x517171,0x516971,0x516171,0x515971,0x000042,0x110041,0x200041,0x310041,0x410041,0x410032,0x410020,0x410010,0x410000,0x411000,0x412000,0x413100,0x414100,0x314100,0x204100,0x104100,0x034100,0x034110,0x024120,0x014131,0x004141,0x003141,0x002041,0x001041,0x202041,0x282041,0x312041,0x392041,0x412041,0x412039,0x412031,0x412028,0x412020,0x412820,0x413120,0x413921,0x414120,0x394120,0x314120,0x284120,0x204120,0x204128,0x204131,0x204139,0x204141,0x203941,0x203141,0x202841,0x2d2d41,0x312d41,0x352d41,0x3d2d41,0x412d41,0x412d3d,0x412d35,0x412d31,0x412d2d,0x41312d,0x41352d,0x413d2d,0x41412d,0x3d412d,0x35412d,0x31412d,0x2d412d,0x2d4131,0x2d4135,0x2d413d,0x2d4141,0x2d3d41,0x2d3541,0x2d3141,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000]
COLORS = [(0,0,0),(0,2,170),(20,170,0),(0,170,170),(170,0,3),(170,0,170),(170,85,0),(170,170,170),(85,85,85),(85,85,255),(85,255,85),(85,255,255),(255,85,85),(253,85,255),(255,255,85),(255,255,255),(0,0,0),(16,16,16),(32,32,32),(53,53,53),(69,69,69),(85,85,85),(101,101,101),(117,117,117),(138,138,138),(154,154,154),(170,170,170),(186,186,186),(202,202,202),(223,223,223),(239,239,239),(255,255,255),(0,4,255),(65,4,255),(130,3,255),(190,2,255),(253,0,255),(254,0,190),(255,0,130),(255,0,65),(255,0,8),(255,65,5),(255,130,0),(255,190,0),(255,255,0),(190,255,0),(130,255,0),(65,255,1),(36,255,0),(34,255,66),(29,255,130),(18,255,190),(0,255,255),(0,190,255),(1,130,255),(0,65,255),(130,130,255),(158,130,255),(190,130,255),(223,130,255),(253,130,255),(254,130,223),(255,130,190),(255,130,158),(255,130,130),(255,158,130),(255,190,130),(255,223,130),(255,255,130),(223,255,130),(190,255,130),(158,255,130),(130,255,130),(130,255,158),(130,255,190),(130,255,223),(130,255,255),(130,223,255),(130,190,255),(130,158,255),(186,186,255),(202,186,255),(223,186,255),(239,186,255),(254,186,255),(254,186,239),(255,186,223),(255,186,202),(255,186,186),(255,202,186),(255,223,186),(255,239,186),(255,255,186),(239,255,186),(223,255,186),(202,255,187),(186,255,186),(186,255,202),(186,255,223),(186,255,239),(186,255,255),(186,239,255),(186,223,255),(186,202,255),(1,1,113),(28,1,113),(57,1,113),(85,0,113),(113,0,113),(113,0,85),(113,0,57),(113,0,28),(113,0,1),(113,28,1),(113,57,0),(113,85,0),(113,113,0),(85,113,0),(57,113,0),(28,113,0),(9,113,0),(9,113,28),(6,113,57),(3,113,85),(0,113,113),(0,85,113),(0,57,113),(0,28,113),(57,57,113),(69,57,113),(85,57,113),(97,57,113),(113,57,113),(113,57,97),(113,57,85),(113,57,69),(113,57,57),(113,69,57),(113,85,57),(113,97,57),(113,113,57),(97,113,57),(85,113,57),(69,113,58),(57,113,57),(57,113,69),(57,113,85),(57,113,97),(57,113,113),(57,97,113),(57,85,113),(57,69,114),(81,81,113),(89,81,113),(97,81,113),(105,81,113),(113,81,113),(113,81,105),(113,81,97),(113,81,89),(113,81,81),(113,89,81),(113,97,81),(113,105,81),(113,113,81),(105,113,81),(97,113,81),(89,113,81),(81,113,81),(81,113,90),(81,113,97),(81,113,105),(81,113,113),(81,105,113),(81,97,113),(81,89,113),(0,0,66),(17,0,65),(32,0,65),(49,0,65),(65,0,65),(65,0,50),(65,0,32),(65,0,16),(65,0,0),(65,16,0),(65,32,0),(65,49,0),(65,65,0),(49,65,0),(32,65,0),(16,65,0),(3,65,0),(3,65,16),(2,65,32),(1,65,49),(0,65,65),(0,49,65),(0,32,65),(0,16,65),(32,32,65),(40,32,65),(49,32,65),(57,32,65),(65,32,65),(65,32,57),(65,32,49),(65,32,40),(65,32,32),(65,40,32),(65,49,32),(65,57,33),(65,65,32),(57,65,32),(49,65,32),(40,65,32),(32,65,32),(32,65,40),(32,65,49),(32,65,57),(32,65,65),(32,57,65),(32,49,65),(32,40,65),(45,45,65),(49,45,65),(53,45,65),(61,45,65),(65,45,65),(65,45,61),(65,45,53),(65,45,49),(65,45,45),(65,49,45),(65,53,45),(65,61,45),(65,65,45),(61,65,45),(53,65,45),(49,65,45),(45,65,45),(45,65,49),(45,65,53),(45,65,61),(45,65,65),(45,61,65),(45,53,65),(45,49,65),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]

def zeros(nbOfzerox):
    returnArray = []
    a = ''.join([str(0) for i in range(64)])
    for i in range(0, nbOfzerox):
        returnArray.append(convertToList(a))

    returnArray = str(returnArray).replace('\'', '')
    returnArray = returnArray.replace(']', ',')
    print(returnArray)

def closest_color(rgb):
    r,g,b = rgb
    color_diffs=[]
    for c in COLORS:
        cr, cg, cb = c
        color_diff = sqrt((r-cr)**2+ (g-cg)**2+ (b-cb)**2)
        color_diffs.append(color_diff)

    mini = min(color_diffs)
    return color_diffs.index(mini)

def main(rangeLow, rangehight):
    for i in range(rangeLow, rangehight):
        img = Image.open("ASCILetters/{}.png".format(i))
        img = img.convert('RGB')
        pix = img.load()
        liste = []
        for y in range(0, 8):
            for x in range(0, 8):
                liste.append("0" if pix[x, y] == (0,0,0) else "1")
        print(convertToList(''.join(liste)) + ",")


def convertToList(a : str):
    c = "{"
    for i in range(0, len(a)):
        c += a[i]
        c += ","
    c = c[:len(c)-1]
    c+="}"
    return c

def readImageMain():
    nm = input("img nm>")
    img = Image.open("imgs/{}.png".format(nm))
    img = img.convert('RGB')
    pix = img.load()
    h,w = img.size

    print("Size {}h {}w".format(h, w))
    liste = []
    for y in range(w):
        for x in range(h):
            triplet = pix[x, y]
            a = closest_color(triplet)
            liste.append(a)
    name = "imgs/"+str(nm)+".lol"
    print(name)
    f = open(name, 'w')
    b = str(liste)
    b = b.replace('[', '{')
    b = b.replace(']', '}')
    f.write(b)
    f.close()


if __name__ == "__main__":
    #readImageMain()
    #zeros(32)
    #main(33, 64)
    print(convertToList(input(">")))